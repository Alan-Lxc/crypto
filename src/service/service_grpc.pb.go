// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NodeServiceClient is the client API for NodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeServiceClient interface {
	Phase1GetStart(ctx context.Context, in *RequestMsg, opts ...grpc.CallOption) (*ResponseMsg, error)
	Phase1ReceiveMsg(ctx context.Context, in *PointMsg, opts ...grpc.CallOption) (*ResponseMsg, error)
	Phase1Verify(ctx context.Context, in *RequestMsg, opts ...grpc.CallOption) (*ResponseMsg, error)
	Phase2Share(ctx context.Context, in *ZeroMsg, opts ...grpc.CallOption) (*ResponseMsg, error)
	Phase2Verify(ctx context.Context, in *RequestMsg, opts ...grpc.CallOption) (*ResponseMsg, error)
	Phase3SendMsg(ctx context.Context, in *PointMsg, opts ...grpc.CallOption) (*ResponseMsg, error)
	Phase3Verify(ctx context.Context, in *RequestMsg, opts ...grpc.CallOption) (*ResponseMsg, error)
}

type nodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeServiceClient(cc grpc.ClientConnInterface) NodeServiceClient {
	return &nodeServiceClient{cc}
}

func (c *nodeServiceClient) Phase1GetStart(ctx context.Context, in *RequestMsg, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/service.NodeService/Phase1GetStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) Phase1ReceiveMsg(ctx context.Context, in *PointMsg, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/service.NodeService/Phase1ReceiveMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) Phase1Verify(ctx context.Context, in *RequestMsg, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/service.NodeService/Phase1Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) Phase2Share(ctx context.Context, in *ZeroMsg, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/service.NodeService/Phase2Share", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) Phase2Verify(ctx context.Context, in *RequestMsg, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/service.NodeService/Phase2Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) Phase3SendMsg(ctx context.Context, in *PointMsg, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/service.NodeService/Phase3SendMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) Phase3Verify(ctx context.Context, in *RequestMsg, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/service.NodeService/Phase3Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServiceServer is the server API for NodeService service.
// All implementations must embed UnimplementedNodeServiceServer
// for forward compatibility
type NodeServiceServer interface {
	Phase1GetStart(context.Context, *RequestMsg) (*ResponseMsg, error)
	Phase1ReceiveMsg(context.Context, *PointMsg) (*ResponseMsg, error)
	Phase1Verify(context.Context, *RequestMsg) (*ResponseMsg, error)
	Phase2Share(context.Context, *ZeroMsg) (*ResponseMsg, error)
	Phase2Verify(context.Context, *RequestMsg) (*ResponseMsg, error)
	Phase3SendMsg(context.Context, *PointMsg) (*ResponseMsg, error)
	Phase3Verify(context.Context, *RequestMsg) (*ResponseMsg, error)
	//mustEmbedUnimplementedNodeServiceServer()
}

// UnimplementedNodeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNodeServiceServer struct {
}

func (UnimplementedNodeServiceServer) Phase1GetStart(context.Context, *RequestMsg) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Phase1GetStart not implemented")
}
func (UnimplementedNodeServiceServer) Phase1ReceiveMsg(context.Context, *PointMsg) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Phase1ReceiveMsg not implemented")
}
func (UnimplementedNodeServiceServer) Phase1Verify(context.Context, *RequestMsg) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Phase1Verify not implemented")
}
func (UnimplementedNodeServiceServer) Phase2Share(context.Context, *ZeroMsg) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Phase2Share not implemented")
}
func (UnimplementedNodeServiceServer) Phase2Verify(context.Context, *RequestMsg) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Phase2Verify not implemented")
}
func (UnimplementedNodeServiceServer) Phase3SendMsg(context.Context, *PointMsg) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Phase3SendMsg not implemented")
}
func (UnimplementedNodeServiceServer) Phase3Verify(context.Context, *RequestMsg) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Phase3Verify not implemented")
}
func (UnimplementedNodeServiceServer) mustEmbedUnimplementedNodeServiceServer() {}

// UnsafeNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeServiceServer will
// result in compilation errors.
type UnsafeNodeServiceServer interface {
	mustEmbedUnimplementedNodeServiceServer()
}

func RegisterNodeServiceServer(s grpc.ServiceRegistrar, srv NodeServiceServer) {
	s.RegisterService(&NodeService_ServiceDesc, srv)
}

func _NodeService_Phase1GetStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).Phase1GetStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.NodeService/Phase1GetStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).Phase1GetStart(ctx, req.(*RequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_Phase1ReceiveMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PointMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).Phase1ReceiveMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.NodeService/Phase1ReceiveMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).Phase1ReceiveMsg(ctx, req.(*PointMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_Phase1Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).Phase1Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.NodeService/Phase1Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).Phase1Verify(ctx, req.(*RequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_Phase2Share_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZeroMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).Phase2Share(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.NodeService/Phase2Share",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).Phase2Share(ctx, req.(*ZeroMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_Phase2Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).Phase2Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.NodeService/Phase2Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).Phase2Verify(ctx, req.(*RequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_Phase3SendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PointMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).Phase3SendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.NodeService/Phase3SendMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).Phase3SendMsg(ctx, req.(*PointMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_Phase3Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).Phase3Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.NodeService/Phase3Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).Phase3Verify(ctx, req.(*RequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeService_ServiceDesc is the grpc.ServiceDesc for NodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.NodeService",
	HandlerType: (*NodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Phase1GetStart",
			Handler:    _NodeService_Phase1GetStart_Handler,
		},
		{
			MethodName: "Phase1ReceiveMsg",
			Handler:    _NodeService_Phase1ReceiveMsg_Handler,
		},
		{
			MethodName: "Phase1Verify",
			Handler:    _NodeService_Phase1Verify_Handler,
		},
		{
			MethodName: "Phase2Share",
			Handler:    _NodeService_Phase2Share_Handler,
		},
		{
			MethodName: "Phase2Verify",
			Handler:    _NodeService_Phase2Verify_Handler,
		},
		{
			MethodName: "Phase3SendMsg",
			Handler:    _NodeService_Phase3SendMsg_Handler,
		},
		{
			MethodName: "Phase3Verify",
			Handler:    _NodeService_Phase3Verify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// BulletinBoardServiceClient is the client API for BulletinBoardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BulletinBoardServiceClient interface {
	//    rpc GetCoeffofNodeSecretShares1(RequestForCoeffMsg) returns(stream CoeffMsg){}
	GetCoeffofNodeSecretShares2(ctx context.Context, in *RequestMsg, opts ...grpc.CallOption) (*CoeffMsg, error)
	// Start a epoch
	StartEpoch(ctx context.Context, in *RequestMsg, opts ...grpc.CallOption) (*ResponseMsg, error)
	// BulletinBoard RPC for recontruction phase
	ReadPhase1(ctx context.Context, in *RequestMsg, opts ...grpc.CallOption) (BulletinBoardService_ReadPhase1Client, error)
	WritePhase1(ctx context.Context, in *Cmt1Msg, opts ...grpc.CallOption) (*ResponseMsg, error)
	// BulletinBoard RPC for proactivization phase
	WritePhase2(ctx context.Context, in *CommitMsg, opts ...grpc.CallOption) (*ResponseMsg, error)
	ReadPhase2(ctx context.Context, in *RequestMsg, opts ...grpc.CallOption) (BulletinBoardService_ReadPhase2Client, error)
	// BulletinBoard RPC for share distribution phase
	WritePhase3(ctx context.Context, in *Cmt1Msg, opts ...grpc.CallOption) (*ResponseMsg, error)
	WritePhase32(ctx context.Context, in *Cmt1Msg, opts ...grpc.CallOption) (*ResponseMsg, error)
	ReadPhase3(ctx context.Context, in *RequestMsg, opts ...grpc.CallOption) (BulletinBoardService_ReadPhase3Client, error)
}

type bulletinBoardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBulletinBoardServiceClient(cc grpc.ClientConnInterface) BulletinBoardServiceClient {
	return &bulletinBoardServiceClient{cc}
}

func (c *bulletinBoardServiceClient) GetCoeffofNodeSecretShares2(ctx context.Context, in *RequestMsg, opts ...grpc.CallOption) (*CoeffMsg, error) {
	out := new(CoeffMsg)
	err := c.cc.Invoke(ctx, "/service.BulletinBoardService/GetCoeffofNodeSecretShares2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bulletinBoardServiceClient) StartEpoch(ctx context.Context, in *RequestMsg, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/service.BulletinBoardService/StartEpoch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bulletinBoardServiceClient) ReadPhase1(ctx context.Context, in *RequestMsg, opts ...grpc.CallOption) (BulletinBoardService_ReadPhase1Client, error) {
	stream, err := c.cc.NewStream(ctx, &BulletinBoardService_ServiceDesc.Streams[0], "/service.BulletinBoardService/ReadPhase1", opts...)
	if err != nil {
		return nil, err
	}
	x := &bulletinBoardServiceReadPhase1Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BulletinBoardService_ReadPhase1Client interface {
	Recv() (*Cmt1Msg, error)
	grpc.ClientStream
}

type bulletinBoardServiceReadPhase1Client struct {
	grpc.ClientStream
}

func (x *bulletinBoardServiceReadPhase1Client) Recv() (*Cmt1Msg, error) {
	m := new(Cmt1Msg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bulletinBoardServiceClient) WritePhase1(ctx context.Context, in *Cmt1Msg, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/service.BulletinBoardService/WritePhase1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bulletinBoardServiceClient) WritePhase2(ctx context.Context, in *CommitMsg, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/service.BulletinBoardService/WritePhase2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bulletinBoardServiceClient) ReadPhase2(ctx context.Context, in *RequestMsg, opts ...grpc.CallOption) (BulletinBoardService_ReadPhase2Client, error) {
	stream, err := c.cc.NewStream(ctx, &BulletinBoardService_ServiceDesc.Streams[1], "/service.BulletinBoardService/ReadPhase2", opts...)
	if err != nil {
		return nil, err
	}
	x := &bulletinBoardServiceReadPhase2Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BulletinBoardService_ReadPhase2Client interface {
	Recv() (*CommitMsg, error)
	grpc.ClientStream
}

type bulletinBoardServiceReadPhase2Client struct {
	grpc.ClientStream
}

func (x *bulletinBoardServiceReadPhase2Client) Recv() (*CommitMsg, error) {
	m := new(CommitMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bulletinBoardServiceClient) WritePhase3(ctx context.Context, in *Cmt1Msg, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/service.BulletinBoardService/WritePhase3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bulletinBoardServiceClient) WritePhase32(ctx context.Context, in *Cmt1Msg, opts ...grpc.CallOption) (*ResponseMsg, error) {
	out := new(ResponseMsg)
	err := c.cc.Invoke(ctx, "/service.BulletinBoardService/WritePhase32", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bulletinBoardServiceClient) ReadPhase3(ctx context.Context, in *RequestMsg, opts ...grpc.CallOption) (BulletinBoardService_ReadPhase3Client, error) {
	stream, err := c.cc.NewStream(ctx, &BulletinBoardService_ServiceDesc.Streams[2], "/service.BulletinBoardService/ReadPhase3", opts...)
	if err != nil {
		return nil, err
	}
	x := &bulletinBoardServiceReadPhase3Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BulletinBoardService_ReadPhase3Client interface {
	Recv() (*Cmt1Msg, error)
	grpc.ClientStream
}

type bulletinBoardServiceReadPhase3Client struct {
	grpc.ClientStream
}

func (x *bulletinBoardServiceReadPhase3Client) Recv() (*Cmt1Msg, error) {
	m := new(Cmt1Msg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BulletinBoardServiceServer is the server API for BulletinBoardService service.
// All implementations must embed UnimplementedBulletinBoardServiceServer
// for forward compatibility
type BulletinBoardServiceServer interface {
	//    rpc GetCoeffofNodeSecretShares1(RequestForCoeffMsg) returns(stream CoeffMsg){}
	GetCoeffofNodeSecretShares2(context.Context, *RequestMsg) (*CoeffMsg, error)
	// Start a epoch
	StartEpoch(context.Context, *RequestMsg) (*ResponseMsg, error)
	// BulletinBoard RPC for recontruction phase
	ReadPhase1(*RequestMsg, BulletinBoardService_ReadPhase1Server) error
	WritePhase1(context.Context, *Cmt1Msg) (*ResponseMsg, error)
	// BulletinBoard RPC for proactivization phase
	WritePhase2(context.Context, *CommitMsg) (*ResponseMsg, error)
	ReadPhase2(*RequestMsg, BulletinBoardService_ReadPhase2Server) error
	// BulletinBoard RPC for share distribution phase
	WritePhase3(context.Context, *Cmt1Msg) (*ResponseMsg, error)
	WritePhase32(context.Context, *Cmt1Msg) (*ResponseMsg, error)
	ReadPhase3(*RequestMsg, BulletinBoardService_ReadPhase3Server) error
	//mustEmbedUnimplementedBulletinBoardServiceServer()
}

// UnimplementedBulletinBoardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBulletinBoardServiceServer struct {
}

func (UnimplementedBulletinBoardServiceServer) GetCoeffofNodeSecretShares2(context.Context, *RequestMsg) (*CoeffMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoeffofNodeSecretShares2 not implemented")
}
func (UnimplementedBulletinBoardServiceServer) StartEpoch(context.Context, *RequestMsg) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartEpoch not implemented")
}
func (UnimplementedBulletinBoardServiceServer) ReadPhase1(*RequestMsg, BulletinBoardService_ReadPhase1Server) error {
	return status.Errorf(codes.Unimplemented, "method ReadPhase1 not implemented")
}
func (UnimplementedBulletinBoardServiceServer) WritePhase1(context.Context, *Cmt1Msg) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WritePhase1 not implemented")
}
func (UnimplementedBulletinBoardServiceServer) WritePhase2(context.Context, *CommitMsg) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WritePhase2 not implemented")
}
func (UnimplementedBulletinBoardServiceServer) ReadPhase2(*RequestMsg, BulletinBoardService_ReadPhase2Server) error {
	return status.Errorf(codes.Unimplemented, "method ReadPhase2 not implemented")
}
func (UnimplementedBulletinBoardServiceServer) WritePhase3(context.Context, *Cmt1Msg) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WritePhase3 not implemented")
}
func (UnimplementedBulletinBoardServiceServer) WritePhase32(context.Context, *Cmt1Msg) (*ResponseMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WritePhase32 not implemented")
}
func (UnimplementedBulletinBoardServiceServer) ReadPhase3(*RequestMsg, BulletinBoardService_ReadPhase3Server) error {
	return status.Errorf(codes.Unimplemented, "method ReadPhase3 not implemented")
}
func (UnimplementedBulletinBoardServiceServer) mustEmbedUnimplementedBulletinBoardServiceServer() {}

// UnsafeBulletinBoardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BulletinBoardServiceServer will
// result in compilation errors.
type UnsafeBulletinBoardServiceServer interface {
	mustEmbedUnimplementedBulletinBoardServiceServer()
}

func RegisterBulletinBoardServiceServer(s grpc.ServiceRegistrar, srv BulletinBoardServiceServer) {
	s.RegisterService(&BulletinBoardService_ServiceDesc, srv)
}

func _BulletinBoardService_GetCoeffofNodeSecretShares2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BulletinBoardServiceServer).GetCoeffofNodeSecretShares2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.BulletinBoardService/GetCoeffofNodeSecretShares2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BulletinBoardServiceServer).GetCoeffofNodeSecretShares2(ctx, req.(*RequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _BulletinBoardService_StartEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BulletinBoardServiceServer).StartEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.BulletinBoardService/StartEpoch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BulletinBoardServiceServer).StartEpoch(ctx, req.(*RequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _BulletinBoardService_ReadPhase1_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BulletinBoardServiceServer).ReadPhase1(m, &bulletinBoardServiceReadPhase1Server{stream})
}

type BulletinBoardService_ReadPhase1Server interface {
	Send(*Cmt1Msg) error
	grpc.ServerStream
}

type bulletinBoardServiceReadPhase1Server struct {
	grpc.ServerStream
}

func (x *bulletinBoardServiceReadPhase1Server) Send(m *Cmt1Msg) error {
	return x.ServerStream.SendMsg(m)
}

func _BulletinBoardService_WritePhase1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cmt1Msg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BulletinBoardServiceServer).WritePhase1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.BulletinBoardService/WritePhase1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BulletinBoardServiceServer).WritePhase1(ctx, req.(*Cmt1Msg))
	}
	return interceptor(ctx, in, info, handler)
}

func _BulletinBoardService_WritePhase2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BulletinBoardServiceServer).WritePhase2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.BulletinBoardService/WritePhase2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BulletinBoardServiceServer).WritePhase2(ctx, req.(*CommitMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _BulletinBoardService_ReadPhase2_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BulletinBoardServiceServer).ReadPhase2(m, &bulletinBoardServiceReadPhase2Server{stream})
}

type BulletinBoardService_ReadPhase2Server interface {
	Send(*CommitMsg) error
	grpc.ServerStream
}

type bulletinBoardServiceReadPhase2Server struct {
	grpc.ServerStream
}

func (x *bulletinBoardServiceReadPhase2Server) Send(m *CommitMsg) error {
	return x.ServerStream.SendMsg(m)
}

func _BulletinBoardService_WritePhase3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cmt1Msg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BulletinBoardServiceServer).WritePhase3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.BulletinBoardService/WritePhase3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BulletinBoardServiceServer).WritePhase3(ctx, req.(*Cmt1Msg))
	}
	return interceptor(ctx, in, info, handler)
}

func _BulletinBoardService_WritePhase32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cmt1Msg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BulletinBoardServiceServer).WritePhase32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.BulletinBoardService/WritePhase32",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BulletinBoardServiceServer).WritePhase32(ctx, req.(*Cmt1Msg))
	}
	return interceptor(ctx, in, info, handler)
}

func _BulletinBoardService_ReadPhase3_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BulletinBoardServiceServer).ReadPhase3(m, &bulletinBoardServiceReadPhase3Server{stream})
}

type BulletinBoardService_ReadPhase3Server interface {
	Send(*Cmt1Msg) error
	grpc.ServerStream
}

type bulletinBoardServiceReadPhase3Server struct {
	grpc.ServerStream
}

func (x *bulletinBoardServiceReadPhase3Server) Send(m *Cmt1Msg) error {
	return x.ServerStream.SendMsg(m)
}

// BulletinBoardService_ServiceDesc is the grpc.ServiceDesc for BulletinBoardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BulletinBoardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.BulletinBoardService",
	HandlerType: (*BulletinBoardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCoeffofNodeSecretShares2",
			Handler:    _BulletinBoardService_GetCoeffofNodeSecretShares2_Handler,
		},
		{
			MethodName: "StartEpoch",
			Handler:    _BulletinBoardService_StartEpoch_Handler,
		},
		{
			MethodName: "WritePhase1",
			Handler:    _BulletinBoardService_WritePhase1_Handler,
		},
		{
			MethodName: "WritePhase2",
			Handler:    _BulletinBoardService_WritePhase2_Handler,
		},
		{
			MethodName: "WritePhase3",
			Handler:    _BulletinBoardService_WritePhase3_Handler,
		},
		{
			MethodName: "WritePhase32",
			Handler:    _BulletinBoardService_WritePhase32_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadPhase1",
			Handler:       _BulletinBoardService_ReadPhase1_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadPhase2",
			Handler:       _BulletinBoardService_ReadPhase2_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadPhase3",
			Handler:       _BulletinBoardService_ReadPhase3_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
